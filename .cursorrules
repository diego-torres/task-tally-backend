# Cursor Rules for Task-tally Backend

## Project Overview
This is a Quarkus-based Java 17 backend for Task-tally, a task management system with GitHub integration, PostgreSQL persistence, and Kubernetes deployment.

## Core Technical Rules (from AGENTS.md)

### Security & Compliance (NON-NEGOTIABLE)
- **NEVER store raw secrets** in source control, logs, or databases. Store only **references** like `k8s:secret/<name>#<key>` or `vault:kv/...`
- **No plaintext secret echo** in logs, exceptions, or tests. Mask with `****`
- **SSH keys**: API accepts uploaded private keys only to immediately store in external secret store (Kubernetes Secret or Vault)
- **PII minimization**: Store minimum user info; never log user emails or tokens
- **Dependency hygiene**: Pin versions; avoid unmaintained libraries

### Architecture
- **Backend**: Quarkus REST with layered architecture: `api → service → repo → db`
- **Persistence**: PostgreSQL with Flyway migrations; JSONB for flexible preferences
- **Secrets**: Use `SecretResolver` SPI (Kubernetes + Vault). Code consumes only secret values returned at runtime
- **Git**: Prefer GitHub REST API or App installation tokens. Allow SSH transport when user has uploaded SSH key

### Code Standards
- **Java files**: Use 2 spaces for indentation throughout all `.java` files. No tabs allowed
- **Formatting**: Follow the project's eclipse-formatter.xml configuration
- **Error handling**: Use JSON error envelope + request ID pattern

## Git-based YAML Storage (CRITICAL)

### Templates and Outcomes Storage
- **Templates**: Store Git repository references in database (URL, branch, SSH key name, YAML path)
- **Outcomes**: Stored in Git repositories as YAML files, NOT in database
- **YAML Structure**: Follow the specification with phase objects containing name, track, product, environment

### When Working with Models, DTOs, or APIs
- **DO NOT create database repositories** for outcomes or templates data
- **DO expect backend details to be stored in Git repositories** as YAML files
- **DO use GitYamlService** for reading/writing outcomes to Git repositories
- **DO use SshGitService** for Git operations (clone, commit, push)
- **DO follow the YAML structure** specified in the requirements

### YAML Structure Example
```yaml
outcomes:
  - outcome:
      phase:
        name: phase name
        track: track name
        product: product name
        environment: environment name
      prefix: some prefix description
      description: the long description of an outcome here
      notes: some scoping notes here
```

### Database Schema
- **Templates table**: Contains Git repository references, not the actual template data
- **No outcomes table**: Outcomes are stored in Git repositories
- **Credential references**: Store SSH key references for Git operations

## Collaboration Rules

### Testing Approach
- **ALWAYS include tests** with any new features
- **Unit tests**: Write comprehensive unit tests for service layer and business logic
- **Integration tests**: Include resource/integration tests for API endpoints
- **Test coverage**: Aim for high test coverage, especially for security-critical code
- **Test data**: Use test containers for database tests; never use production data
- **Test execution**: All tests in this project should run through the command `./mvnw clean test`
- **Evaluation**: Running tests is sufficient for code evaluation; the user will handle application runtime and integration testing

### Code Generation Guidelines
- **Explain reasoning**: When making architectural decisions, explain your rationale
- **Security first**: Always prioritize security in code generation
- **Documentation**: Include clear comments for complex logic, especially security-related code
- **Error handling**: Implement proper error handling and validation
- **API design**: Follow RESTful principles and existing API patterns

### Communication Style
- **Be thorough**: Provide detailed explanations for complex changes
- **Security focus**: Always highlight security implications of changes
- **Testing emphasis**: Explicitly mention testing approach for new features
- **Code review**: Suggest improvements and explain trade-offs

### File Organization
- Follow existing package structure: `api`, `service`, `repo`, `model`, `secrets`
- Place tests in corresponding test packages
- Use meaningful class and method names
- Follow Java naming conventions

## When Implementing New Features
1. **Security review**: Ensure no secrets are persisted inappropriately
2. **Testing**: Include unit and integration tests
3. **Documentation**: Update relevant documentation
4. **Migration**: Include Flyway migrations if schema changes needed
5. **API consistency**: Follow existing API patterns and error handling
6. **Git-based storage**: Remember that outcomes and templates are stored in Git, not database

## Reference Files
- `AGENTS.md` - Detailed technical specifications
- `pom.xml` - Dependencies and build configuration
- `application.properties` - Application configuration
- `eclipse-formatter.xml` - Code formatting rules

Remember: Security, testing, and Git-based YAML storage are non-negotiable. Always prioritize these aspects in any code generation or modification.
